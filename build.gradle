import java.util.regex.Pattern

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.2'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.6'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.getkeepsafe.dexcount' // Outputs to ${buildDir}/outputs/dexcount/${variant}

dexcount {
    format = "list"
    includeClasses = false
    includeClassCount = false
    includeFieldCount = true
    includeTotalMethodCount = false
    orderByMethodCount = false
    verbose = false
    maxTreeDepth = Integer.MAX_VALUE
    runOnEachPackage = true
    maxMethodCount = 2100 // This includes android.* etc dependencies, so I guess just do it this way for now
}

import static groovy.io.FileType.FILES

gradle.projectsEvaluated {
    android.libraryVariants.all { variant ->
        def variantName = variant.name.capitalize()
        def proguardTask = project.tasks.findByName(
                "transformClassesAndResourcesWithProguardFor${variantName}")
        if (proguardTask) {
            // Compute UUID
            def sentry_debug_meta_properties = "${project.rootDir.toPath()}/build/intermediates/assets" +
                    "/${variant.dirName}/sentry-debug-meta.properties"
            def sentryProguardTask = project.tasks.create(
                    name: "processSentryProguardFor${variantName}",
                    type: Exec) {
                workingDir project.rootDir
                commandLine "sentry-cli", "upload-proguard", "--write-properties",
                        sentry_debug_meta_properties,
                        variant.getMappingFile(),
                        "--no-upload"
            }

            // Add UUID into resource strings
            sentryProguardTask.doLast {
                def props = new Properties()
                file(sentry_debug_meta_properties).withInputStream { props.load(it) }

                def uuid = props.getProperty("io.sentry.ProguardUuids")
                println "> adding ${uuid} to resources."

                new File("${project.rootDir.toPath()}/build/intermediates").eachFileRecurse(FILES) {
                    if(it.name.endsWith('.xml')) {
                        String contents = file(it).getText('UTF-8')
                        if(contents.contains("<string name=\"io_teak_sentry_proguard_uuid\"/>")) {
                            println "> modified ${it}"
                            String fixedContents = contents.replaceAll("<string name=\"io_teak_sentry_proguard_uuid\"/>", "<string name=\"io_teak_sentry_proguard_uuid\">${uuid}</string>")
                            file(it).write(fixedContents, 'UTF-8')
                        }
                    }
                }
            }

            // Add to task chain
            proguardTask.finalizedBy sentryProguardTask
        }
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

tasks.whenTaskAdded { task ->
    if(task.name.contains("Test")) {
        task.enabled = false
    }
}

android.libraryVariants.all { variant ->
    // Javadoc task
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        doFirst { classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) }
        exclude '**/BuildConfig.java', '**/R.java'
    }

    // Jar task
    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html
    // ${android.defaultConfig.versionName}
    def variantName = variant.name.capitalize()
    def proguardTask = project.tasks.findByName(
            "transformClassesAndResourcesWithProguardFor${variantName}")

    def jarTask = task("jar${variant.name.capitalize()}", type: Jar) {
        description "Bundles compiled .class files into a JAR file for $variant.name."
        dependsOn (proguardTask == null ? variant.javaCompile : proguardTask)
        from variant.javaCompile.destinationDir
        include 'io/teak/**'
        archiveName "${archivesBaseName}-${variant.name}.jar"
    }
    artifacts.add('archives', jarTask)

    // Zip jar + res/
    artifacts.add('archives', task("zip${variant.name.capitalize()}", type: Zip) {
        description "Bundles .jar file and res/**.xml into a ZIP file for $variant.name."
        dependsOn jarTask
        archiveName "${archivesBaseName}-${variant.name}.zip"

        from(jarTask.archivePath) {
            into('teak')
            rename(Pattern.quote(jarTask.archivePath.name), "teak.jar")
        }

        // Use 'filter' to insert the proguard uuid into zip archive
        def sentry_debug_meta_properties = "${project.rootDir.toPath()}/build/intermediates/assets" +
                "/${variant.dirName}/sentry-debug-meta.properties"
        def props = new Properties()
        try {
            file(sentry_debug_meta_properties).withInputStream { props.load(it) }
            def uuid = props.getProperty("io.sentry.ProguardUuids")

            filter { line ->
                line.replaceAll("<string name=\"io_teak_sentry_proguard_uuid\"/>", "<string name=\"io_teak_sentry_proguard_uuid\">${uuid}</string>")
            }
        } catch (ignored) {
        }
        from fileTree(dir: "src/main", include: 'res/**')
    })
}

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    // IMPORTANT: Changing versions?  Update `setup` as well!
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 2
        versionName getVersionName()
        consumerProguardFiles 'proguard.txt'
        archivesBaseName = 'teak'
    }

    // Dex cannot parse version 52 byte code
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles 'proguard.txt', 'library.pro'
        }
    }
}

dependencies {
    //noinspection GradleCompatible
    implementation 'com.android.installreferrer:installreferrer:1.0'

    implementation 'com.android.support:support-core-utils:28+'
    implementation 'com.android.support:support-compat:28+'

    implementation 'com.google.android.gms:play-services-ads:16+'
    implementation 'com.google.android.gms:play-services-base:16+'
    implementation 'com.google.android.gms:play-services-basement:16+'

    implementation 'com.google.firebase:firebase-messaging:17.3.+'
    implementation 'com.firebase:firebase-jobdispatcher:0.8.5'

    // Amazon, Air, Unity compile-time-only dependencies
    compileOnly files('libs/amazon-device-messaging-1.0.1.jar')
    compileOnly files('libs/in-app-purchasing-2.0.76.jar')
    compileOnly files('libs/FlashRuntimeExtensions.jar')
    compileOnly files('libs/UnityClasses.jar')
}
