buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
    }
}

apply plugin: 'com.android.library'

import static groovy.io.FileType.FILES

gradle.projectsEvaluated {
    android.libraryVariants.all { variant ->

        if (variant.buildType.isMinifyEnabled()) {
            def variantName = variant.name.capitalize()
            def proguardTaskName = "minify${variantName}WithR8"
            def proguardTask = project.tasks.findByName(proguardTaskName)
            if (proguardTask == null) {
                throw new GradleException('> could not find mapping task: ' + proguardTaskName)
            }
            if (variant.mappingFileProvider.get().files.size() != 1) {
                throw new GradleException('> expected only one mapping file, got ' + variant.mappingFileProvider.get().files.size())
            }

            // Compute UUID
            def sentry_debug_meta_properties = "${project.rootDir.toPath()}/build/intermediates/assets" +
                    "/${variant.dirName}/sentry-debug-meta.properties"
            def sentryProguardTask = project.tasks.create(
                    name: "processSentryR8For${variantName}",
                    type: Exec) {
                workingDir project.rootDir
                commandLine "sentry-cli", "upload-proguard", "--write-properties",
                        sentry_debug_meta_properties,
                        variant.mappingFileProvider.get().files[0],
                        "--no-upload",
                        "--require-one"
            }

            // Add UUID into resource strings
            sentryProguardTask.doLast {
                def props = new Properties()
                file(sentry_debug_meta_properties).withInputStream { props.load(it) }

                def uuid = props.getProperty("io.sentry.ProguardUuids")
                println "> adding ${uuid} to resources."

                new File("${project.rootDir.toPath()}/build/intermediates").eachFileRecurse(FILES) {
                    if(it.name.endsWith('.xml')) {
                        String contents = file(it).getText('UTF-8')
                        if(contents.contains("<string name=\"io_teak_sentry_proguard_uuid\"/>")) {
                            println "> modified ${it}"
                            String fixedContents = contents.replaceAll("<string name=\"io_teak_sentry_proguard_uuid\"/>", "<string name=\"io_teak_sentry_proguard_uuid\">${uuid}</string>")
                            file(it).write(fixedContents, 'UTF-8')
                        }
                    }
                }
            }

            // Add to task chain
            proguardTask.finalizedBy sentryProguardTask
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

tasks.whenTaskAdded { task ->
    if(task.name.contains("Test")) {
        task.enabled = false
    }
}

task generateApiDoc() {
    group "reporting"
    description "Generates Javadoc."
}

android.libraryVariants.all { variant ->
    // Only consider release 
    if (variant.buildType.name == "release") {
        def task = project.tasks.create("generate${variant.name.capitalize()}Javadoc", Javadoc) {
            group "ApiDoc"
            description "Generates Javadoc for $variant.name."

            destinationDir = file("docs/javadoc/javadoc") // This is intended duplication

            // Source files from the variant
            source = project.android.sourceSets.main.java.srcDirs

            // Classpath from the variant + android.jar
            classpath = variant.javaCompileProvider.get().classpath + files(project.android.getBootClasspath()) + files("$buildDir/intermediates/classes/release")

            // Include only public facing API classes
            include "**/Teak.java"
            include "**/TeakNotification.java"

            options.windowTitle = "Teak Android SDK"
            options.memberLevel = JavadocMemberLevel.PUBLIC
            options.linkSource = false
            options.links("http://docs.oracle.com/javase/7/docs/api/")
            options.links("http://d.android.com/reference")

            failOnError false
        }

        task.dependsOn getAssembleProvider()
        generateApiDoc.dependsOn task
    }
}

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 16
        versionCode 2
        versionName getVersionName()
        consumerProguardFiles 'proguard.txt'
        archivesBaseName = 'teak'
    }

    buildTypes {
        debug {
            buildConfigField "long", "VERSION_CODE", "${defaultConfig.versionCode}"
            buildConfigField "String" ,"VERSION_NAME", "\"${defaultConfig.versionName}\""
        }

        release {
            minifyEnabled true
            proguardFiles 'proguard.txt', 'build-library.pro'

            buildConfigField "long", "VERSION_CODE", "${defaultConfig.versionCode}"
            buildConfigField "String" ,"VERSION_NAME", "\"${defaultConfig.versionName}\""
        }
    }

    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'org.greenrobot:eventbus:3.2.0'

    //noinspection GradleCompatible
    implementation 'com.android.installreferrer:installreferrer:2.2'

    implementation 'androidx.core:core:1.3+'
    implementation 'androidx.work:work-runtime:2.5.0'

    implementation 'com.google.android.gms:play-services-ads:17.1.0'
    implementation 'com.google.android.gms:play-services-base:17.1.0'
    implementation 'com.google.android.gms:play-services-basement:17.1.0'

    implementation 'com.google.firebase:firebase-messaging:21.0.0'

    // Optional Google Billing v3
    compileOnly "com.android.billingclient:billing:3.0.0"

    // Optional Facebook dependency
    compileOnly 'com.facebook.android:facebook-common:9+'

    // Optional Amazon dependencies
    compileOnly files('libs/amazon-device-messaging-1.1.0.jar')
    compileOnly files('libs/in-app-purchasing-2.0.76.jar')

    // Optional Unity dependency
    compileOnly files('libs/UnityClasses.jar')
}
