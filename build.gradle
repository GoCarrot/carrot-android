import com.android.builder.core.BuilderConstants

import java.util.regex.Pattern

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
    }
}

apply plugin: 'com.android.library'

repositories {
    mavenCentral()
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

android.libraryVariants.all { variant ->

}

android.libraryVariants.all { variant ->
    // Javadoc task
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        exclude '**/BuildConfig.java', '**/R.java'
    }

    // Jar task
    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html
    // ${android.defaultConfig.versionName}
    def jarTask = task("jar${variant.name.capitalize()}", type: Jar) {
        description "Bundles compiled .class files into a JAR file for $variant.name."
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir
        exclude '**/R.class', '**/R$*.class', '**/R.html', '**/R.*.html',
                'com/**'
        if (variant.buildType.name.equals(BuilderConstants.DEBUG)) {
            archiveName "${archivesBaseName}-${variant.name}.jar"
        } else {
            archiveName "${archivesBaseName}-${variant.name}.jar"
        }
    }
    artifacts.add('archives', jarTask)

    // Zip jar + res/
    artifacts.add('archives', task("zip${variant.name.capitalize()}", type: Zip) {
        description "Bundles .jar file and res/**.xml into a ZIP file for $variant.name."
        dependsOn jarTask
        def flavor
        if (variant.buildType.name.equals(BuilderConstants.DEBUG)) {
            archiveName "${archivesBaseName}-${variant.name}.zip"
        } else {
            archiveName "${archivesBaseName}-${variant.name}.zip"
        }

        from(jarTask.archivePath) {
            into('teak')
            rename(Pattern.quote(jarTask.archivePath.name), "teak.jar")
        }

        from fileTree(dir: "src/${flavor}", include: 'res/**')
    })

    // Rename AARs
    variant.outputs.each { output ->
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.aar')) {
            def fileName
            if (variant.buildType.name.equals(BuilderConstants.DEBUG)) {
                fileName = "${archivesBaseName}-${variant.name}.aar"
            } else {
                fileName = "${archivesBaseName}-${variant.name}.aar"
            }
            output.outputFile = new File(outputFile.parent, fileName)
        }
    }
}

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    // IMPORTANT: Changing versions?  Update `setup` as well!
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 2
        versionName getVersionName()
        consumerProguardFiles 'proguard.txt'
        archivesBaseName = 'teak'
    }
}

dependencies {
    // Google Play files
    compile 'com.google.android.gms:play-services-gcm:7.0.0'
    compile 'com.google.android.gms:play-services-ads:7.0.0'

    // Amazon files, compile-time only dependencies
    provided files('libs/amazon-device-messaging-1.0.1.jar')
    provided files('libs/in-app-purchasing-2.0.76.jar')
}
