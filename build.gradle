import com.android.builder.core.BuilderConstants

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
    }
}

apply plugin: 'com.android.library'

repositories {
    mavenCentral()
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

android.libraryVariants.all { variant ->

}

android.libraryVariants.all { variant ->
    // Javadoc task
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        exclude '**/BuildConfig.java', '**/R.java'
    }

    // Jar task
    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html
    artifacts.add('archives', task("jar${variant.name.capitalize()}", type: Jar) {
        description "Bundles compiled .class files into a JAR file for $variant.name."
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir
        exclude '**/R.class', '**/R$*.class', '**/R.html', '**/R.*.html' // TODO: Exclude dependencies here
        archiveName "${archivesBaseName}-${variant.name}-${android.defaultConfig.versionName}.jar"
    })
    // TODO: Zip jar + /res/ task that depends on jar task

    // Rename AARs
    variant.outputs.each { output ->
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.aar')) {
            def fileName = null
            def name = variant.buildType.name
            if (name.equals(BuilderConstants.DEBUG)) {
                fileName = "${archivesBaseName}-debug-${android.defaultConfig.versionName}.aar"
            } else {
                fileName = "${archivesBaseName}-${android.defaultConfig.versionName}.aar"
            }
            output.outputFile = new File(outputFile.parent, fileName)
        }
    }
}

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    // IMPORTANT: Changing versions?  Update `setup` as well!
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultPublishConfig "api_gteq_21Release"
    publishNonDefault true

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 2
        versionName getVersionName()
        consumerProguardFiles 'proguard.txt'
        archivesBaseName = 'teak'
    }

    productFlavors {
        api_lt_21
        api_gteq_21
    }
}

dependencies {
    compile 'com.google.android.gms:play-services-ads:6.5.87'
}
