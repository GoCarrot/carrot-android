buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
    }
}

apply plugin: 'com.android.library'

repositories {
    mavenCentral()
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        // title = ''
        // description = ''
        source = variant.javaCompile.source
        classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
        options {
            links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
        }
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

android.libraryVariants.all { variant ->
    def name = variant.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}

android.libraryVariants.all { variant ->
    variant.outputs.each { output ->
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.aar')) {
            def fileName = null
            def name = variant.buildType.name
            if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
                fileName = "${archivesBaseName}-debug-${android.defaultConfig.versionName}.aar"
            } else {
                fileName = "${archivesBaseName}-${android.defaultConfig.versionName}.aar"
            }
            output.outputFile = new File(outputFile.parent, fileName)
        }
    }
}

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getSentryDSN = { ->
    Properties properties = new Properties()
    properties.load(project.file('sentry.properties').newDataInputStream())
    return properties.getProperty('sentry.dsn')
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 23
        versionCode = 2
        versionName = getVersionName()
        consumerProguardFiles 'proguard.txt'
        archivesBaseName = 'teak'
        buildConfigField "String", "SentryDSN", getSentryDSN()
    }
}

dependencies {
    compile 'com.google.android.gms:play-services-ads:6.5.87'
}
