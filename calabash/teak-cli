#!/usr/bin/env ruby
require_relative 'features/support/teak_run_history'

# References:
# https://www.jstorimer.com/blogs/workingwithcode/7766125-writing-ruby-scripts-that-respect-pipelines
# http://stackoverflow.com/questions/6929112/line-oriented-streaming-in-ruby-like-grep

# escaped bash color codes
cyan = "\e[96m"
red = "\e[31m"
bold_underline = "\e[1;4m"
reset_color = "\e[0m"

STDIN.sync = true

teak_run_history = TeakRunHistory.new

def next_line
  mybuff = @overflow || ""
  until mybuff[/\n/]
    newbuff = ARGF.read(256)
    return false if newbuff == nil
    mybuff += newbuff
  end
  overflow = mybuff.split("\n")
  out, *others = overflow
  @overflow = others.join("\n")
  out
rescue EOFError => e
  return false unless @overflow && @overflow.length > 0
  output = @overflow
  @overflow = ""
  output
end

line = next_line

while line
  output_line = nil
  output_line_color = cyan
  event_stream = TeakRunHistory::EventStream.new

  begin
    event_stream = teak_run_history.new_log_line(line, event_stream)
    output_line = event_stream.human_readable
  rescue => e
    output_line = e
    output_line_color = red
  end

  if output_line != nil
    # Indent
    output_line = output_line.lines.map{|line| line.insert(0, "  ")}.join

    # Turn the output to red starting at the first character.
    output_line.insert(0, output_line_color)
    # Reset the text color back to what it was at the end of the
    # line.
    output_line.insert(-1, "#{reset_color}\n")

    line.insert(0, bold_underline)
    line.insert(-1, reset_color)
    output_line.insert(0, "#{line}\n")

    begin
      $stdout.syswrite output_line
    rescue Errno::EPIPE
      exit(74)
    end
  end

  line = next_line
end
